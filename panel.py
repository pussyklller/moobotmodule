
import streamlit as st
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="Hikka Module Control Panel",
    page_icon="üêÆ",
    layout="wide"
)

def get_base_dir():
    return Path(os.getenv("HIKKA_DIR", "/root/data"))

def get_config_path(user_id):
    base = get_base_dir()
    base.mkdir(parents=True, exist_ok=True)
    return base / f"config-{user_id}.json"

st.write(f"HOME={Path.home()}")
st.write(f"HIKKA_DIR={os.getenv('HIKKA_DIR')}")
p = get_config_path(user_id)
st.write(f"Config path={p}, exists={p.exists()}")

def load_config(user_id):
    config_path = get_config_path(user_id)
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return None
    except json.JSONDecodeError:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {config_path}")
        return None

def save_config(user_id, config_data):
    config_path = get_config_path(user_id)
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=4, ensure_ascii=False)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
st.title("üêÆ Hikka AutoFarmbot Control Panel")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤–≤–æ–¥–∞ User ID
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    user_id = st.text_input(
        "User ID –∞–∫–∫–∞—É–Ω—Ç–∞",
        placeholder="123456789",
        help="–í–≤–µ–¥–∏—Ç–µ User ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"
    )

    if user_id:
        st.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–∏–≥—É: config-{user_id}.json")

    st.divider()
    st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("–≠—Ç–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–æ–¥—É–ª—è AutoFarmbot –¥–ª—è Hikka")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if user_id:
    config = load_config(user_id)

    if config:
        st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üå≥ –ê–≤—Ç–æ–ª–µ—Å", 
            "üß§ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç", 
            "ü•õ –ê–≤—Ç–æ–¥–æ–π–∫–∞",
            "ü™¥ –ö–∞–∫—Ç—É—Å",
            "‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ])

        with tab1:
            st.header("üå≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ–ª–µ—Å–∞")

            col1, col2 = st.columns(2)

            with col1:
                forest_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ª–µ—Å",
                    value=config.get("config_bot_auto_forest", False),
                    key="forest_enabled"
                )
                config["config_bot_auto_forest"] = forest_enabled

                skip_npc = st.checkbox(
                    "–°–∫–∏–ø–∞—Ç—å NPC",
                    value=config.get("config_bot_auto_forest_skip_npc", True),
                    key="skip_npc"
                )
                config["config_bot_auto_forest_skip_npc"] = skip_npc

            with col2:
                # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                forest_commands = config.get("config_bot_auto_forest_command", ["–º—É–ª—Å"])
                selected_cmd = st.selectbox(
                    "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞",
                    ["/forest", "–º—É–ª—Å", "–º—É –ª–µ—Å"],
                    index=0 if not forest_commands else (
                        ["/forest", "–º—É–ª—Å", "–º—É –ª–µ—Å"].index(forest_commands[0]) 
                        if forest_commands[0] in ["/forest", "–º—É–ª—Å", "–º—É –ª–µ—Å"] 
                        else 0
                    )
                )
                config["config_bot_auto_forest_command"] = [selected_cmd]

            st.divider()
            st.subheader("ü¶î –í—ã–±–æ—Ä NPC –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
            npc_list = {
                "npc_belka": "üêø –ë–µ–ª–æ—á–∫–∞",
                "npc_jabomraz": "üê∏ –ñ–∞–±–æ–º—Ä–∞–∑—å",
                "npc_edinorog": "ü¶Ñ –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞",
                "npc_djun": "ü¶ú –î–∂—É–Ω",
                "npc_chick": "üê§ –¶—ã–ø–∞",
                "npc_bear": "üêª –¢—ç–¥–¥–∏",
                "npc_ejik": "üíïü¶î –í–∏–Ω–¥–∏"
            }

            current_npcs = config.get("config_bot_autoforest_npcs", [])

            cols = st.columns(3)
            for i, (npc_key, npc_name) in enumerate(npc_list.items()):
                with cols[i % 3]:
                    checked = st.checkbox(
                        npc_name,
                        value=npc_key in current_npcs,
                        key=f"npc_{npc_key}"
                    )
                    if checked and npc_key not in current_npcs:
                        current_npcs.append(npc_key)
                    elif not checked and npc_key in current_npcs:
                        current_npcs.remove(npc_key)

            config["config_bot_autoforest_npcs"] = current_npcs

        # –í–∫–ª–∞–¥–∫–∞ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç
        with tab2:
            st.header("üß§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞")

            col1, col2 = st.columns(2)

            with col1:
                craft_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç",
                    value=config.get("config_bot_auto_craft", False),
                    key="craft_enabled"
                )
                config["config_bot_auto_craft"] = craft_enabled

                craft_item = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
                    value=config.get("config_bot_auto_craft_item_name", "–º–∞—Å–ª–æ"),
                    placeholder="–º–∞—Å–ª–æ, –∫—É–∫–∏ –∏ —Ç.–¥.",
                    key="craft_item"
                )
                config["config_bot_auto_craft_item_name"] = craft_item

            with col2:
                craft_count = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞",
                    min_value=1,
                    max_value=100,
                    value=int(config.get("config_bot_auto_craft_count", 50)),
                    key="craft_count"
                )
                config["config_bot_auto_craft_count"] = str(craft_count)

                craft_command = st.selectbox(
                    "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞",
                    ["/craft", "–º—É–≤", "–º—É –∫—Ä–∞—Ñ—Ç"],
                    index=["/craft", "–º—É–≤", "–º—É –∫—Ä–∞—Ñ—Ç"].index(
                        config.get("config_bot_auto_craft_command", "–º—É–≤")
                    ) if config.get("config_bot_auto_craft_command") in ["/craft", "–º—É–≤", "–º—É –∫—Ä–∞—Ñ—Ç"] else 1
                )
                config["config_bot_auto_craft_command"] = craft_command

        # –í–∫–ª–∞–¥–∫–∞ –ê–≤—Ç–æ–¥–æ–π–∫–∞
        with tab3:
            st.header("ü•õ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ–¥–æ–π–∫–∏")

            col1, col2 = st.columns(2)

            with col1:
                milk_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–¥–æ–π–∫—É",
                    value=config.get("config_bot_auto_milk", False),
                    key="milk_enabled"
                )
                config["config_bot_auto_milk"] = milk_enabled

            with col2:
                milk_commands = config.get("config_bot_auto_milk_command", ["–º—É–∫"])
                milk_cmd = st.selectbox(
                    "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞",
                    ["/cow", "–º—É–∫", "–º—É –∫–æ—Ä–æ–≤–∞"],
                    index=0 if not milk_commands else (
                        ["/cow", "–º—É–∫", "–º—É –∫–æ—Ä–æ–≤–∞"].index(milk_commands[0])
                        if milk_commands[0] in ["/cow", "–º—É–∫", "–º—É –∫–æ—Ä–æ–≤–∞"]
                        else 1
                    )
                )
                config["config_bot_auto_milk_command"] = [milk_cmd]

        # –í–∫–ª–∞–¥–∫–∞ –ö–∞–∫—Ç—É—Å
        with tab4:
            st.header("ü™¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∞–∫—Ç—É—Å–∞")

            col1, col2 = st.columns(2)

            with col1:
                cactus_enabled = st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–∞–∫—Ç—É—Å",
                    value=config.get("config_bot_auto_cactus", True),
                    key="cactus_enabled"
                )
                config["config_bot_auto_cactus"] = cactus_enabled

                water_enabled = st.checkbox(
                    "–ü–æ–ª–∏–≤–∞—Ç—å –∫–∞–∫—Ç—É—Å",
                    value=config.get("config_bot_auto_cactus_water_drink", True),
                    key="water_enabled"
                )
                config["config_bot_auto_cactus_water_drink"] = water_enabled

            with col2:
                water_lvl = st.slider(
                    "–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –¥–ª—è –ø–æ–ª–∏–≤–∞ (%)",
                    min_value=0,
                    max_value=100,
                    value=int(config.get("config_bot_auto_cactus_water_drink_lvl", 50)),
                    key="water_lvl"
                )
                config["config_bot_auto_cactus_water_drink_lvl"] = str(water_lvl)

                water_clicks = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –ø–æ–ª–∏–≤–∞",
                    min_value=1,
                    max_value=10,
                    value=int(config.get("config_bot_auto_cactus_water_drink_click", 1)),
                    help="1 –∫–ª–∏–∫ = 50% –≤–æ–¥—ã",
                    key="water_clicks"
                )
                config["config_bot_auto_cactus_water_drink_click"] = str(water_clicks)

        # –í–∫–ª–∞–¥–∫–∞ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with tab5:
            st.header("‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

            col1, col2 = st.columns(2)

            with col1:
                debug_enabled = st.checkbox(
                    "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
                    value=config.get("config_debug_msg", False),
                    key="debug_enabled"
                )
                config["config_debug_msg"] = debug_enabled

                chat_id = st.text_input(
                    "ID —á–∞—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                    value=str(config.get("config_bot_used_chat_id", "1606812809")),
                    placeholder="1606812809",
                    key="chat_id"
                )
                config["config_bot_used_chat_id"] = chat_id

            with col2:
                log_chat = st.text_input(
                    "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏",
                    value=config.get("config_bot_send_logs", "me"),
                    placeholder="me, default –∏–ª–∏ ID —á–∞—Ç–∞",
                    key="log_chat"
                )
                config["config_bot_send_logs"] = log_chat

                timezone = st.selectbox(
                    "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                    ["UTC", "Europe/Kiev", "Europe/Moscow", "Asia/Tokyo", "America/New_York", "Europe/London"],
                    index=["UTC", "Europe/Kiev", "Europe/Moscow", "Asia/Tokyo", "America/New_York", "Europe/London"].index(
                        config.get("config_user_tz", "UTC")
                    ) if config.get("config_user_tz") in ["UTC", "Europe/Kiev", "Europe/Moscow", "Asia/Tokyo", "America/New_York", "Europe/London"] else 0
                )
                config["config_user_tz"] = timezone

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        st.divider()
        col1, col2, col3 = st.columns([1, 1, 2])

        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True):
                if save_config(user_id, config):
                    st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.balloons()

        with col2:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", use_container_width=True):
                st.rerun()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON –∫–æ–Ω—Ñ–∏–≥
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä JSON –∫–æ–Ω—Ñ–∏–≥–∞"):
            st.json(config)

else:
    st.info("üëà –í–≤–µ–¥–∏—Ç–µ User ID –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    st.markdown("""
    ### üìö –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

    1. **–ù–∞–π–¥–∏—Ç–µ –≤–∞—à User ID** - —ç—Ç–æ ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
    2. **–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ** –≤ –ø–æ–ª–µ —Å–ª–µ–≤–∞
    3. **–ö–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω** –∏–∑ —Ñ–∞–π–ª–∞ `config-{user_id}.json`
    4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    5. **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è** - –æ–Ω–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ –º–æ–¥—É–ª—é

    ### üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤:

    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∏ Hikka –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤:
    - **Linux/MacOS**: `~/Hikka/config-{user_id}.json`

    ### ‚ö†Ô∏è –í–∞–∂–Ω–æ:

    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Hikka —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    - –ú–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Hikka –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    - –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è
    """, unsafe_allow_html=True)

# –§—É—Ç–µ—Ä
st.divider()
st.markdown("""
<div style='text-align: center; color: gray;'>
    <p>Hikka AutoFarmbot Control Panel v1.0</p>
    <p>–°–æ–∑–¥–∞–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–º AutoFarmbot</p>
</div>
""", unsafe_allow_html=True)
